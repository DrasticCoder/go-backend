basePath: /
definitions:
  controllers.AuthPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Backend in Go with PostgreSQL, JWT, and Swagger
  title: CRM API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthPayload'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login a user
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
      summary: Logout a user
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: 'User Info (default: {username: ''john123'', email: ''john@doe.com'',
          password: ''Pa$$w0rd!'', role: ''free''})'
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /api/v1/health:
    get:
      consumes:
      - application/json
      description: Returns OK if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - Health
  /api/v1/users/profile:
    get:
      consumes:
      - application/json
      description: Returns the profile of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get User Profile
      tags:
      - User
swagger: "2.0"
